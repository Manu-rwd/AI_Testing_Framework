import os
import sys
import json
from pathlib import Path

# Lightweight extractors to get titles/sections from PDFs and sheet/column names from XLSX
# Dependencies: pdfminer.six, openpyxl

def extract_pdf_signals(pdf_path: Path) -> dict:
    try:
        from pdfminer.high_level import extract_text
    except Exception as e:
        return {"path": str(pdf_path), "error": f"pdfminer import failed: {e}"}

    try:
        text = extract_text(str(pdf_path))
        lines = [l.strip() for l in text.splitlines() if l.strip()]
        title = lines[0] if lines else ""
        # naive section candidates: lines that look like headings
        sections = [l for l in lines[:500] if len(l) < 120 and (l.isupper() or l.endswith(':'))]
        return {"path": str(pdf_path), "title": title, "sections_sample": sections[:30]}
    except Exception as e:
        return {"path": str(pdf_path), "error": str(e)}


def extract_xlsx_signals(xlsx_path: Path) -> dict:
    try:
        from openpyxl import load_workbook
    except Exception as e:
        return {"path": str(xlsx_path), "error": f"openpyxl import failed: {e}"}

    try:
        wb = load_workbook(str(xlsx_path), read_only=True, data_only=True)
        sheets = []
        for ws in wb.worksheets:
            # read header row (first non-empty row)
            header = []
            for row in ws.iter_rows(min_row=1, max_row=5, values_only=True):
                if row and any(cell is not None and str(cell).strip() for cell in row):
                    header = ["" if c is None else str(c).strip() for c in row]
                    break
            sheets.append({"name": ws.title, "header": header})
        return {"path": str(xlsx_path), "sheets": sheets}
    except Exception as e:
        return {"path": str(xlsx_path), "error": str(e)}


def main():
    repo_root = Path(__file__).resolve().parents[3]
    review_root = repo_root / "Rewiew"
    out_dir = review_root / "FULL_REVIEW" / "cache" / "signals"
    out_dir.mkdir(parents=True, exist_ok=True)

    targets = []
    # PDFs
    for p in [
        review_root / "Files used or generated by chats" / "Ghid UIUX - Norme si bune practici 1.pdf",
        review_root / "Initial project files" / "Definire cazuri de testare 1.pdf",
    ]:
        if p.exists():
            targets.append(p)

    # XLSX
    for p in [
        review_root / "Initial project files" / "Biblioteca_cazuri_de_testare-update.xlsx",
    ]:
        if p.exists():
            targets.append(p)

    results = []
    for t in targets:
        if t.suffix.lower() == ".pdf":
            results.append(extract_pdf_signals(t))
        elif t.suffix.lower() in (".xlsx", ".xlsm"):
            results.append(extract_xlsx_signals(t))

    out_path = out_dir / "signals.json"
    with out_path.open("w", encoding="utf-8") as f:
        json.dump({"items": results}, f, ensure_ascii=False, indent=2)
    print(str(out_path))


if __name__ == "__main__":
    main()


